@startuml Updated Order Book Class Diagram

' ==== ENUMS ====
enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  LIMIT
  MARKET
}

' ==== BASE ORDER CLASSES ====
abstract class Order {
  - id: str
  - side: OrderSide
  - quantity: int
  - timestamp: float
  + get_id(): str
  + to_dict(): dict
  + __lt__(other: Order): bool
}

class LimitOrder {
  - _price: float
  + price: float
  + order_type: OrderType
  + from_dict(data: dict): LimitOrder
  + __lt__(other: Order): bool
}

class MarketOrder {
  + price: float
  + order_type: OrderType
  + from_dict(data: dict): MarketOrder
  + __lt__(other: Order): bool
}

Order <|-- LimitOrder
Order <|-- MarketOrder

' ==== TRADE ====
class Trade {
  - buy_id: str
  - sell_id: str
  - quantity: int
  - price: float
  - timestamp: float
  + to_dict(): dict
  + __str__(): str
}

Trade --> Order

' ==== ORDER BOOK ====
class OrderBook {
  - bids: list
  - asks: list
  - market_buys: list
  - market_sells: list
  - orders: dict
  + add_order(order: Order): bool
  + remove_order(order_id: str): bool
  + get_best_limit_order(side: OrderSide): LimitOrder
  + get_next_market_order(side: OrderSide): MarketOrder
}

OrderBook --> Order

' ==== MATCH ENGINE ====
class MatchEngine {
  - book: OrderBook
  - trades: list
  + match_limit_order(order: LimitOrder): list[Trade]
  + match_market_order(order: MarketOrder): list[Trade]
  + place_order(order: Order): list[Trade]
}

MatchEngine --> OrderBook
MatchEngine --> Trade

' ==== EXCHANGE ====
class Exchange {
  - order_books: dict[str, OrderBook]
  - match_engines: dict[str, MatchEngine]
  + get_book(ticker: str): OrderBook
  + get_engine(ticker: str): MatchEngine
  + add_ticker(ticker: str)
}

Exchange --> OrderBook
Exchange --> MatchEngine

' ==== COMMAND SYSTEM ====
abstract class Command {
  + run(ticker: str): dict
}

class AddCommand {
  - order: Order
  + run(ticker: str): dict
}

class CancelCommand {
  - order_id: str
  + run(ticker: str): dict
}

class DisplayCommand {
  + run(ticker: str): dict
}

Command <|-- AddCommand
Command <|-- CancelCommand
Command <|-- DisplayCommand

Exchange --> Command : executes

' ==== PARSER ====
class Parser {
  - delimiter: str
  - reverse_tag_map: dict
  + encode(data: dict): str
  + decode(message: str): dict
  + parse_order(message: str): Command
}

Parser --> Command : creates
Parser --> Order

@enduml