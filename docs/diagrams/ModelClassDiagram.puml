@startuml Order Book Class Diagram

enum OrderSide {
  BUY
  SELL
}

enum OrderType {
  LIMIT
  MARKET
}

class Order {
  - order_id: str
  - side: OrderSide
  - price: float
  - quantity: int
  - remaining: int
  - order_type: OrderType
  - timestamp: float
  + __lt__(other: Order): bool
}

class Trade {
  - buy_id: str
  - sell_id: str
  - quantity: int
  - price: float
  - timestamp: float
  + __str__(): str
}

class OrderBook {
  - buys: list
  - sells: list
  - orders: dict
  + add_order(order: Order): bool
  + cancel_order(order_id: str): bool
  + get_best(side: OrderSide): Order
  + snapshot(): dict
}

class MatchEngine {
  - book: OrderBook
  - trades: list
  + try_match(order: Order): bool
}

class EventLogger {
  + log_event(event: str)
  + log_trade(trade: Trade)
}

class Exchange {
  - orderBooks: dict      // ticker -> OrderBook
  - matchEngines: dict    // ticker -> MatchEngine
  - order_to_client: dict
  + generate_order_id(): str
  + add_order(order: Order): dict
  + cancel_order(order_id: str): dict
  + display_orderbook(): dict
  + execute_command(command: Command, client_id: str)
}

abstract class Command {
  + run(exchange: Exchange): dict
}

class AddCommand {
  - order: Order
  + run(exchange: Exchange): dict
}

class CancelCommand {
  - order_id: str
  + run(exchange: Exchange): dict
}

class DisplayCommand {
  + run(exchange: Exchange): dict
}

class Parser {
  + decode(message: str): dict
  + parse_fix(message: str): Command
  + encode(data: dict): str
}

Parser --> Command : "creates"
Exchange --> Command : "executes run()"
Command <|-- AddCommand
Command <|-- CancelCommand
Command <|-- DisplayCommand

Exchange --> OrderBook : "manages"
Exchange --> MatchEngine : "delegates matching"
MatchEngine --> OrderBook : "uses for matching"
EventLogger --> Trade
OrderBook --> Order
Order --> OrderSide
Order --> OrderType

@enduml
